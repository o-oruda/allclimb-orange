import type { Bridge, BridgeStore, ExtractStore, KeyOfOrString, Parser, ParserSchema, PrimitiveObject } from "../../../../shared/util/src/types";
import { DefaultEmitter } from "../../../../shared/util/src";
import { LinkBridgeOptions } from "../linkBridge";
import { LinkBridge } from "../types";
export declare class BridgeInstance<T extends BridgeStore<T extends Bridge ? T : any>, V extends ParserSchema<any> = ParserSchema<any>> {
    private _options;
    private _emitter;
    private _bridgeMethods;
    _nativeInitialState: PrimitiveObject;
    constructor(_options: LinkBridgeOptions<T, V>, _emitter: DefaultEmitter, _bridgeMethods: string[], _nativeInitialState: PrimitiveObject);
    private _defaultTimeoutMs;
    private _isListenerRegistered;
    store: Omit<T, "setState">;
    get isReactNativeWebView(): boolean;
    get isWebViewBridgeAvailable(): boolean;
    isNativeMethodAvailable(methodName: string): boolean;
    addEventListener<EventName extends KeyOfOrString<V>>(eventName: EventName, listener: (args: Parser<V, EventName>) => void): () => void;
    loose: LinkBridge<ExtractStore<T>, Omit<T, "setState">, V>;
    private _postMessage;
    private _createNativeMethod;
    private _willMethodThrowOnError;
    private _createLoose;
    _hydrate(bridgeMethods: string[], nativeInitialState?: PrimitiveObject): boolean;
}
