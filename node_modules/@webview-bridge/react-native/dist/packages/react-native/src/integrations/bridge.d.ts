import type { Bridge, BridgeStore, OnlyJSON, Primitive } from "../../../../shared/util/src/types";
import WebView from "react-native-webview";
export type StoreCallback<T> = ({ get, set, }: {
    get: () => T;
    set: (newState: Partial<OnlyJSON<T>>) => void;
}) => T;
export declare const bridge: <T extends Bridge>(procedures: T | StoreCallback<T>) => BridgeStore<T>;
type HandleBridgeArgs<ArgType = unknown> = {
    bridge: BridgeStore<Bridge>;
    method: string;
    args?: ArgType[];
    webview: WebView;
    eventId: string;
};
export declare const handleBridge: ({ bridge, method, args, webview, eventId, }: HandleBridgeArgs) => Promise<void>;
export declare const INJECT_BRIDGE_METHODS: (bridgeNames: string[]) => string;
export declare const INJECT_BRIDGE_STATE: (initialState: Record<string, Primitive>) => string;
export declare const SAFE_NATIVE_EMITTER_EMIT: (eventName: string, data: unknown) => string;
export declare const SAFE_NATIVE_EMITTER_THROW: (eventName: string) => string;
export {};
