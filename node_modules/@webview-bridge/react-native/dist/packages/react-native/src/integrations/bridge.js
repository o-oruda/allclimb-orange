"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SAFE_NATIVE_EMITTER_THROW = exports.SAFE_NATIVE_EMITTER_EMIT = exports.INJECT_BRIDGE_STATE = exports.INJECT_BRIDGE_METHODS = exports.handleBridge = exports.bridge = void 0;
const util_1 = require("../../../../shared/util/src");
const bridge = (procedures) => {
    const getState = () => state;
    const setState = (newState) => {
        const _newState = {
            ...state,
            ...(0, util_1.removeUndefinedKeys)(newState),
        };
        if ((0, util_1.equals)(state, _newState)) {
            return;
        }
        const prevState = state;
        state = _newState;
        emitChange(state, prevState);
    };
    let state = typeof procedures === "function"
        ? procedures({
            get: getState,
            set: setState,
        })
        : procedures;
    const listeners = new Set();
    const emitChange = (newState, prevState) => {
        for (const listener of listeners) {
            listener(newState, prevState);
        }
    };
    const subscribe = (listener) => {
        listeners.add(listener);
        return () => listeners.delete(listener);
    };
    return {
        getState,
        setState,
        subscribe,
    };
};
exports.bridge = bridge;
const handleBridge = async ({ bridge, method, args, webview, eventId, }) => {
    const _bridge = bridge.getState();
    const _method = _bridge[method];
    const handleThrow = () => {
        webview.injectJavaScript((0, exports.SAFE_NATIVE_EMITTER_THROW)(`${method}-${eventId}`));
    };
    if (!(method in _bridge)) {
        handleThrow();
        return;
    }
    if (typeof _method !== "function") {
        return;
    }
    try {
        const response = await _method?.(...(args ?? []));
        webview.injectJavaScript((0, exports.SAFE_NATIVE_EMITTER_EMIT)(`${method}-${eventId}`, response));
    }
    catch (error) {
        handleThrow();
        console.error(error);
    }
};
exports.handleBridge = handleBridge;
const INJECT_BRIDGE_METHODS = (bridgeNames) => `
    window.__bridgeMethods__ = ${JSON.stringify(bridgeNames)};
`;
exports.INJECT_BRIDGE_METHODS = INJECT_BRIDGE_METHODS;
const INJECT_BRIDGE_STATE = (initialState) => `
    window.__bridgeInitialState__ = ${JSON.stringify(initialState)};
`;
exports.INJECT_BRIDGE_STATE = INJECT_BRIDGE_STATE;
const SAFE_NATIVE_EMITTER_EMIT = (eventName, data) => {
    const dataString = JSON.stringify(data);
    return `
if (window.nativeEmitter) {
  window.nativeEmitter.emit('${eventName}', ${dataString});
} else {
  window.nativeBatchedEvents = window.nativeBatchedEvents || [];
  window.nativeBatchedEvents.push(['${eventName}', ${dataString}]);
}
true;
`;
};
exports.SAFE_NATIVE_EMITTER_EMIT = SAFE_NATIVE_EMITTER_EMIT;
const SAFE_NATIVE_EMITTER_THROW = (eventName) => `
if (window.nativeEmitter) {
  window.nativeEmitter.emit('${eventName}', {}, true);
} else {
  window.nativeBatchedEvents = window.nativeBatchedEvents || [];
  window.nativeBatchedEvents.push(['${eventName}', {}, true]);
}
true;
`;
exports.SAFE_NATIVE_EMITTER_THROW = SAFE_NATIVE_EMITTER_THROW;
