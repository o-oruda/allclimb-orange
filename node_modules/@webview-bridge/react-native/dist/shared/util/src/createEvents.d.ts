interface EventsMap {
    [event: string]: any;
}
export interface DefaultEvents extends EventsMap {
    [event: string]: (...args: any) => void;
}
export interface EventEmitter<Events extends EventsMap = DefaultEvents> {
    emit<K extends keyof Events>(this: this, event: K, ...args: Parameters<Events[K]>): void;
    events: Partial<{
        [E in keyof Events]: Events[E][];
    }>;
    on<K extends keyof Events>(this: this, event: K, cb: Events[K]): () => void;
}
export type DefaultEmitter = EventEmitter<DefaultEvents>;
export declare const createEvents: <Events extends EventsMap = DefaultEvents>() => EventEmitter<Events>;
export interface CreateResolverOptions {
    emitter: DefaultEmitter;
    evaluate: () => void;
    eventId: string;
    failHandler?: Error | false;
    methodName: string;
    onFallback?: () => void;
}
export declare const createResolver: ({ emitter, evaluate, eventId, failHandler, methodName, onFallback, }: CreateResolverOptions) => Promise<unknown>;
export {};
